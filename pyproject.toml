[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "flora-crypto"
dynamic = ["version"]
description = "Sistema de cifrado híbrido post-cuántico con autodestrucción caótica"
readme = "README.md"
license = {text = "Apache-2.0"}
authors = [
    {name = "Crypto Flower Team", email = "team@cryptoflower.dev"}
]
maintainers = [
    {name = "Janus", email = "atomixon49@github.com"}
]
keywords = ["cryptography", "encryption", "post-quantum", "chaos", "security", "hybrid"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Security",
    "Topic :: Security :: Cryptography",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
dependencies = [
    "pycryptodome>=3.15.0",
    "cryptography>=3.4.8",
    "numpy>=1.21.0",
    "scipy>=1.7.0",
    "matplotlib>=3.5.0",
    "click>=8.0.0",
    "rich>=10.12.0",
    "tqdm>=4.62.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.2.5",
    "pytest-cov>=2.12.0",
    "black>=21.7b0",
    "flake8>=3.9.0",
    "mypy>=0.910",
    "pre-commit>=2.15.0",
]
docs = [
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.15.0",
    "sphinx-autodoc-typehints>=1.12.0",
]
benchmarks = [
    "pytest-benchmark>=3.4.1",
    "memory-profiler>=0.60.0",
    "psutil>=5.8.0",
]
security = [
    "bandit>=1.6.0",
    "safety>=1.10.0",
    "pip-audit>=1.1.0",
]

[project.urls]
Homepage = "https://github.com/atomixon49/CRYPTO-FLOWER"
Documentation = "https://flora.readthedocs.io/"
Repository = "https://github.com/atomixon49/CRYPTO-FLOWER.git"
"Bug Tracker" = "https://github.com/atomixon49/CRYPTO-FLOWER/issues"
"Source Code" = "https://github.com/atomixon49/CRYPTO-FLOWER"
"Release Notes" = "https://github.com/atomixon49/CRYPTO-FLOWER/releases"

[project.scripts]
flora = "flora.cli:main"
flora-test = "flora.test_flora:main"

[project.gui-scripts]
flora-gui = "flora.gui:main"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
flora = ["py.typed"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["flora"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
    ".eggs",
    "*.egg",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "Crypto.*",
    "cryptography.*",
    "numpy.*",
    "scipy.*",
    "matplotlib.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests", "src"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "chaos: marks tests related to chaotic destruction",
    "crypto: marks tests related to cryptography",
    "performance: marks tests related to performance",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "test_*"]
skips = ["B101", "B601"]

[tool.safety]
output = "json"
